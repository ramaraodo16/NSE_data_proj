
CREATE or replace TABLE NSE_STOCK_DAILY_DATA_F 
  (
    SYMBOL VARCHAR2( 50 ) ,
    SERIES VARCHAR2( 50 ) ,
OPEN float,
HIGH float,
LOW float,
CLOSE float,
LAST float,
PREVCLOSE float,
TOTTRDQTY float,
TOTTRDVAL float,
TIMESTAMP varchar2(50),
TOTALTRADES Int,
ISIN varchar2(50)
  );
 create or replace file format cm_stock_bhav_csv type ='CSV' Compression ='Auto'
 field_delimiter = ',' record_delimiter ='\n' escape='None' ESCAPE_UNENCLOSED_FIELD = '\134' field_optionally_enclosed_by = '\042'
 skip_header = 1 TRIM_SPACE = False Error_on_column_count_mismatch = false Date_format = 'AUTO' Timestamp_format = 'AUTO'
 NULL_IF = ('\\N');
 
 copy into NSE_STOCK_DAILY_DATA_F from @interal_stg1
 file_format = (format_name = cm_stock_bhav_csv );
 
 
 =======================================================================
 LIST @NSE_STOCKS_DATA_STG;

Create or replace table NSE_STOCL_SS_DATA_DAILY_F(
Symbol varchar(20),
 Date varchar(10),
 Prev_Close varchar(10),
 Open_Price varchar(10),
 High_Price varchar(10),
 Low_Price varchar(10),
 Last_Price varchar(10),
 Close_Price varchar(10),
 Average_Price varchar(10),
 Total_Traded_Quantity varchar(10),
 Turnover varchar(10),
 No_of_Trades varchar(10),
 Deliverable_Qty varchar(10),
 PER_Dly_Qty_to_Traded_Qty nvarchar2(10)
  
);
create or replace schema EDW_RAW;
create or replace table TEST_DB.EDW_RAW.NSE_STOCK_IRCTC_DATA_DAILY_stg as 
select * from TEST_DB.EDW_DEV.NSE_STOCL_SS_DATA_DAILY_F;
create or replace stream TEST_DB.EDW_DEV.NSE_STOCK_HDFC_STREAM on table TEST_DB.EDW_RAW.NSE_STOCK_HDFC_DATA_DAILY_stg;
create or replace stream TEST_DB.EDW_DEV.NSE_STOCK_AXISBANK_STREAM on table TEST_DB.EDW_RAW.NSE_STOCK_AXISBANK_DATA_DAILY_stg;
create or replace stream TEST_DB.EDW_DEV.NSE_STOCK_RIIL_STREAM on table TEST_DB.EDW_RAW.NSE_STOCK_RIIL_DATA_DAILY_stg;
create or replace stream TEST_DB.EDW_DEV.NSE_STOCK_INFY_STREAM on table TEST_DB.EDW_RAW.NSE_STOCK_INFY_DATA_DAILY_stg;
create or replace stream TEST_DB.EDW_DEV.NSE_STOCK_IRCTC_STREAM on table TEST_DB.EDW_RAW.NSE_STOCK_IRCTC_DATA_DAILY_stg; 


select distinct TIMESTAMP,substring(timestamp,8,4) from "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" 
where substring(timestamp,8,4) = 2022 and  substring(timestamp,4,3) = 'JUN'
;
====================================================================================================================

create or replace stage NSE_STOCKS_DATA_STG;

create or replace file format TEST_DB.EDW_DEV.NSE_SD_FMT_CSV type = 'CSV' compression ='AUTO'
FIELD_DELIMITER =',' RECORD_DELIMITER='\n' ESCAPE = NONE ESCAPE_UNENCLOSED_FIELD='\134'
TRIM_SPACE= FALSE ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE FIELD_OPTIONALLY_ENCLOSED_BY = '"'
DATE_FORMAT = 'AUTO' TIMESTAMP_FORMAT = 'AUTO' NULL_IF ='\\N' SKIP_HEADER =1
;
LIST @NSE_STOCKS_DATA_STG/ pattern = '.*AXISBANKALLN.csv.*';
list @NSE_STOCKS_DATA_STG/ pattern = '.*AXISBANKALLN.csv.*';
LIST @nse_stocks_data_stg/ pattern = '.*AXISBANKALLN.csv.*';
show stages;

create or replace table "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_STG" like "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F";
select * from "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_STG";
copy into "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_STG" 
from @nse_stocks_data_stg/ pattern =  '.*cm.*' file_format = 'TEST_DB.EDW_DEV.NSE_SD_FMT_CSV' purge =true;

 select * from "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" where timestamp in ('14-JUL-2022', '15-JUL-2022') order by 1;
create or replace task "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_STREAM_TASK"
--schedule = 'USING Cron 0 22 * * * UTC'
schedule = '2 MINUTES'
when
 SYSTEM$STREAM_HAS_DATA('"TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_STREAM"')
AS 
MERGE into "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" f1
USING "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_STream" stg1
on f1.SYMBOL = stg1.SYMBOL and f1.TIMESTAMP = stg1.TIMESTAMP
when not matched and stg1.METADATA$ACTION ='INSERT' and stg1.METADATA%ISUPDATE = FALSE 
then
insert (f1.SYMBOL,f1.SERIES,f1.OPEN,f1.HIGH,f1.LOW,f1.CLOSE,f1.LAST,f1.PREVCLOSE,f1.TOTTRDQTY,f1.TOTTRDVAL,f1.TIMESTAMP,f1.TOTALTRADES,f1.ISIN)  
values (stg1.SYMBOL,stg1.SERIES,stg1.OPEN,stg1.HIGH,stg1.LOW,stg1.CLOSE,stg1.LAST,stg1.PREVCLOSE,stg1.TOTTRDQTY,stg1.TOTTRDVAL,stg1.TIMESTAMP,stg1.TOTALTRADES,stg1.ISIN)  ;;

create or replace stream "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_STREAM" on table "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_STG" ;
create or replace task TASK_AXISBANK_STG
SchEDULE ='1 minutes'
as 
copy into "TEST_DB"."EDW_RAW"."NSE_STOCK_AXISBANK_DATA_DAILY_STG"
from @nse_stocks_data_stg/ pattern = '.*AXISBANKALLN.csv.*' file_format = 'TEST_DB.EDW_DEV.NSE_SD_FMT_CSV'
;
show tasks;
alter task TASK_AXISBANK_STG resume;
alter task NSE_STOCK_DAILY_DATA_STREAM_TASK resume;
select  * from table(information_schema.task_history());
truncate table TEST_DB.EDW_RAW.NSE_STOCK_AXISBANK_DATA_DAILY_STG;
create or replace table "TEST_DB"."EDW_RAW"."NSE_STOCK_AXISBANK_DATA_DAILY_STG" as 
select * from "TEST_DB"."EDW_DEV"."NSE_STOCK_AXISBANK_DATA_DAILY_F";
select * from "TEST_DB"."EDW_RAW"."NSE_STOCK_AXISBANK_DATA_DAILY_STG";
show   "TEST_DB"."EDW_RAW"."NSE_STOCK_AXISBANK_DATA_DAILY_STG";

select * from "TEST_DB"."EDW_RAW"."NSE_STOCK_AXISBANK_DATA_DAILY_STG";

alter table "TEST_DB"."EDW_RAW"."NSE_STOCK_AXISBANK_DATA_DAILY_STG" modify column PER_DLY_QTY_TO_TRADED_QTY varchar(200);

create or replace table "TEST_DB"."EDW_RAW"."NSE_STOCK_RIIL_DATA_DAILY_STG" (
               SYMBOL varchar(20),
               SERIES varchar(20),
               Date varchar(20),
               PREV_CLOSE varchar(20),
               OPEN_PRICE varchar(20),
               HIGH_PRICE varchar(20),
               LOW_PRICE varchar(20),
               LAST_PRICE varchar(20),
               CLOSE_PRICE varchar(20),
               AVERAGE_PRICE varchar(20),
               TOTAL_TRADED_QUANTITY varchar(20),
               TURNOVER varchar(200),
               NO_OF_TRADES varchar(20),
               DELIVERABLE_QTY varchar(20),
               PER_DLY_QTY_TO_TRADED_QTY varchar(200)
);

create or replace table "TEST_DB"."EDW_RAW"."NSE_STOCK_AXISBANK_DATA_DAILY_F" (
               SYMBOL varchar(20),
               SERIES varchar(10),
               Trade_Date Date,
               PREV_CLOSE float,
               OPEN_PRICE float,
               HIGH_PRICE float,
               LOW_PRICE float,
               LAST_PRICE float,
               CLOSE_PRICE float,
               AVERAGE_PRICE float,
               TOTAL_TRADED_QUANTITY float,
               TURNOVER float,
               NO_OF_TRADES number(38,0),
               DELIVERABLE_QTY number(38,0),
               PER_DLY_QTY_TO_TRADED_QTY float
);

select MAX(REPLACE(date(TIMESTAMP),'-','')) from "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" limit 10;
==================================================================================================

create or replace view "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_V"
(SYMBOL,COMPANY_NAME,INDEX_NAME,INDUSTRY, SR_NUM,Date_WF, Trade_Date,CAL_YEAR,CAL_WEEK,CAL_MONTH,CAL_QTR,
OPEN, "Max Price", "Min Price", "Close Price",  "DIFF_HIGH_LOW",
LAST,PREVCLOSE,TOTTRDQTY,TOTTRDVAL, "Traded Qty")
AS ;

select T1.*,round(avg(T1."21_DAYS_AVG_LOW") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_LOW",
  round(avg(T1."21_DAYS_AVG_MAX") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_MAX",
  round(avg(T1."21_DAYS_AVG_CLOSE") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_CLOSE"
  ,
ROUND(100*(avg(T1."21_DAYS_AVG_LOW") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ))/(T1."21_DAYS_AVG_LOW"*21),2) AS "ACCURACY_MIN_21_DAYS",
ROUND(100*"AVG21_21_DAYS_AVG_MAX"/(T1."21_DAYS_AVG_MAX"*21),2) AS "ACCURACY_MAX_21_DAYS",
ROUND(100*"AVG21_21_DAYS_AVG_CLOSE"/(T1."21_DAYS_AVG_CLOSE"*21),2) AS "ACCURACY_CLOSE_21_DAYS",
ROUND(100*(T1."Traded Qty" -T1."7_DAY_AVG_Trade")/T1."Traded Qty" ,2) as "PER_INCRE_TTL_TRADE_7_DAYS"
  FROM (
select NSD.SYMBOL,SD.COMPANY_NAME,SD.INDEX_NAME,SD.INDUSTRY,DD.SR_NUM,date(nsD.tIMESTAMP) AS Date_WF,
to_char(date(DD.CALENDAR_DATE), 'DD/DD/yyYY') as Trade_Date,DD.CAL_YEAR,DD.CAL_WEEK,DD.CAL_MONTH,DD.CAL_QTR,
NSD.OPEN,NSD.HIGH AS "Max Price",NSD.LOW AS "Min Price",NSD.CLOSE As "Close Price", NSD.HIGH-NSD.LOW AS "DIFF_HIGH_LOW",
NSD.LAST,NSD.PREVCLOSE,NSD.TOTTRDQTY,NSD.TOTTRDVAL,NSD.TOTALTRADES AS "Traded Qty",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_LOW",
  round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_MAX",
  round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_CLOSE",
round(avg(NSD.TOTALTRADES) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
  ) ,2) "7_DAY_AVG_Trade"
from  ("TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" NSD inner join "TEST_DB"."EDW_DEV"."W_DAY_D" DD 
                on replace(date(NSD.timestamp) ,'-','') = DD.SR_NUM) inner join 
"TEST_DB"."EDW_DEV"."STOCK_DIM" SD on NSD.SYMBOL = SD.SYMBOL
where NSD.SYMBOL = 'MINDTREE' order by DD.SR_NUM) T1;
select * from  "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_V"
=====================================================================================
select replace(date(timestamp) ,'-','') from  "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" order by 1;
select  replace(date(timestamp) ,'-',''),to_char(date(timestamp), 'dd/mm/yyyy') from  "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" order by 1;
select * from  "TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" limit 500; 
create or replace table STOCK_DIM
(
Company_Name varchar(100),Industry varchar(100),Symbol varchar(100),Series varchar(100),ISIN_Code varchar(100), Index_name varchar(100));

List @NSE_STOCKS_DATA_STG;

#copy into "TEST_DB"."EDW_DEV"."STOCK_DIM" from ( 

select t.$1, t.$2 ,t.$3,T.$4,t.$5, substring(metadata$filename,5,11)
from @nse_stocks_data_stg/ind_niftynext50list.csv.gz (file_format => NSE_SD_FMT_CSV) t);

select * from Stock_DIM;
select array_agg(SYMBOL) from STOCK_DIM;

select NSD.SYMBOL,SD.COMPANY_NAME,SD.INDEX_NAME,SD.INDUSTRY,DD.SR_NUM,date(nsD.tIMESTAMP),
to_char(date(DD.CALENDAR_DATE), 'DD/DD/yyYY') as Trade_Date,DD.CAL_YEAR,DD.CAL_WEEK,DD.CAL_MONTH,DD.CAL_QTR,
NSD.OPEN,NSD.HIGH,NSD.LOW,NSD.CLOSE,NSD.LAST,NSD.PREVCLOSE,NSD.TOTTRDQTY,NSD.TOTTRDVAL,NSD.TOTALTRADES

from  ("TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" NSD inner join "TEST_DB"."EDW_DEV"."W_DAY_D" DD 
                on replace(date(NSD.timestamp) ,'-','') = DD.SR_NUM) inner join 
"TEST_DB"."EDW_DEV"."STOCK_DIM" SD on NSD.SYMBOL = SD.SYMBOL
limit 100;

;
SELECT substring(CALENDAR_DATE,1,7)||CAL_YEAR FROM w_day_d;
UPDATE  W_DAY_D set CALENDAR_DATE = substring(CALENDAR_DATE,1,7)||CAL_YEAR;

alter table W_DAY_D modify CALENDAR_DATE Varchar(20);

select T1.*,round(avg(T1."21_DAYS_AVG_LOW") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_LOW",
  round(avg(T1."21_DAYS_AVG_MAX") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_MAX",
  round(avg(T1."21_DAYS_AVG_CLOSE") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_CLOSE"
  ,
ROUND(100*(avg(T1."21_DAYS_AVG_LOW") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ))/(T1."21_DAYS_AVG_LOW"*21),2) AS "ACCURACY_MIN_21_DAYS",
ROUND(100*"AVG21_21_DAYS_AVG_MAX"/(T1."21_DAYS_AVG_MAX"*21),2) AS "ACCURACY_MAX_21_DAYS",
ROUND(100*"AVG21_21_DAYS_AVG_CLOSE"/(T1."21_DAYS_AVG_CLOSE"*21),2) AS "ACCURACY_CLOSE_21_DAYS",
ROUND(100*(T1."Traded Qty" -T1."7_DAY_AVG_Trade")/T1."Traded Qty" ,2) as "PER_INCRE_TTL_TRADE_7_DAYS"
  FROM (
select NSD.SYMBOL,SD.COMPANY_NAME,SD.INDEX_NAME,SD.INDUSTRY,DD.SR_NUM,date(nsD.tIMESTAMP) AS Date_WF,
to_char(date(DD.CALENDAR_DATE), 'DD/DD/yyYY') as Trade_Date,DD.CAL_YEAR,DD.CAL_WEEK,DD.CAL_MONTH,DD.CAL_QTR,
NSD.OPEN,NSD.HIGH AS "Max Price",NSD.LOW AS "Min Price",NSD.CLOSE As "Close Price", NSD.HIGH-NSD.LOW AS "DIFF_HIGH_LOW",
NSD.LAST,NSD.PREVCLOSE,NSD.TOTTRDQTY,NSD.TOTTRDVAL,NSD.TOTALTRADES AS "Traded Qty",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_LOW",
  round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_MAX",
  round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_CLOSE",
round(avg(NSD.TOTALTRADES) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
  ) ,2) "7_DAY_AVG_Trade"
from  ("TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" NSD inner join "TEST_DB"."EDW_DEV"."W_DAY_D" DD 
                on replace(date(NSD.timestamp) ,'-','') = DD.SR_NUM) inner join 
"TEST_DB"."EDW_DEV"."STOCK_DIM" SD on NSD.SYMBOL = SD.SYMBOL
where NSD.SYMBOL = 'MINDTREE' order by DD.SR_NUM) T1;

===================================================================================================
CREATE TABLE "W_DAY_D" 
   (	"SR_NUM" VARCHAR2(10), 
	"CALENDAR_DATE" VARCHAR2(10), 
	"CAL_HALF_YEAR" VARCHAR2(10), 
	"CAL_MONTH" VARCHAR2(10), 
	"CAL_QTR" VARCHAR2(10), 
	"CAL_WEEK" VA"TEST_DB"RCHAR2(10), 
	"CAL_YEAR" VARCHAR2(10), 
	"CAL_DATE_NUM" VARCHAR2(10), 
	"CAL_DATE_MONTH_NUM" VARCHAR2(10), 
	"CAL_DATE_YEAR_NUM" VARCHAR2(10), 
	"CAL_DUMMY1" VARCHAR2(10), 
	"CAL_DUMMY2" VARCHAR2(10), 
	"CAL_DUMMY3" VARCHAR2(10), 
	"CAL_DUMMY4" VARCHAR2(10), 
	"CAL_DUMMY5" VARCHAR2(10), 
	"CAL_JAPANIE" VARCHAR2(10), 
	"FY_MONTH" VARCHAR2(10), 
	"FY_QTR" VARCHAR2(10), 
	"FY_WEEK" VARCHAR2(10), 
	"FY_YEAR" VARCHAR2(10), 
	"CAL_DAY_NAME" VARCHAR2(10), 
	"CAL_MONTH_NAME" VARCHAR2(10), 
	"CAL_WEEK_DAY_NAME" VARCHAR2(20), 
	"CAL_NEXT_DAY" VARCHAR2(30), 
	"LOAD_DATE_Y_N" VARCHAR2(10), 
	"YYYYMM" VARCHAR2(10), 
	"YYYY_HALF" VARCHAR2(10), 
	"QTR_1_2" VARCHAR2(10), 
	"YYYY / MM" VARCHAR2(10), 
	"YYYY_QQ" VARCHAR2(10), 
	"YYYY_WEEK" VARCHAR2(10), 
	"YEAR_YY" VARCHAR2(6)
   ) ;
   select count(*) from NSE_DAILY_DATA_LOAD_AGG;
   truncate table NSE_DAILY_DATA_LOAD_AGG;
   create or replace table NSE_DAILY_DATA_LOAD_AGG
( SYMBOL varchar(100),
  COMPANY_NAME varchar(200), 
  INDEX_NAME varchar(100),
  INDUSTRY varchar(100),
  SR_NUM  varchar(10),
  Date_WF varchar(10),
	Trade_Date varchar(10),
	CAL_YEAR Number(4,0),
	CAL_WEEK Number(4,0),
	CAL_MONTH Number(4,0),
	CAL_QTR Number(4,0),
	OPEN float,
	Max_Price float,
	Min_Price float,
	Close_Price float,
	DIFF_HIGH_LOW float,
	LAST float,
	PREVCLOSE float,
    TOTTRDQTY NUMBER(38,0),
	TOTTRDVAL  float,
    Traded_Qty NUMBER(38,0),
	"21_DAYS_AVG_LOW" float,
	"90_DAYS_AVG_LOW" float,
	"180_DAYS_AVG_LOW" float,
	"365_DAYS_AVG_LOW" float,
	"21_DAYS_AVG_MAX" float,
	"90_DAYS_AVG_MAX" float,
	"180_DAYS_AVG_MAX" float,
	"365_DAYS_AVG_MAX" float,
	"21_DAYS_AVG_CLOSE" float,
	"90_DAYS_AVG_CLOSE" float,
	"180_DAYS_AVG_CLOSE" float,
	"365_DAYS_AVG_CLOSE" float,
	"7_DAY_AVG_Trade" float,
	AVG21_21_DAYS_AVG_LOW  float,
	AVG21_21_DAYS_AVG_MAX float,
	AVG21_21_DAYS_AVG_CLOSE  float,
	ACCURACY_MIN_21_DAYS float,
	ACCURACY_MAX_21_DAYS  float,
	ACCURACY_CLOSE_21_DAYS float,
	PER_INCRE_TTL_TRADE_7_DAYS  float
	);
    
    alter table NSE_DAILY_DATA_LOAD_AGG rename column "7_DAY_AVG_Trade" to N7_DAY_AVG_Trade;
    
    
    create or replace view NSE_STOCK_DAILY_DATA_AGG_V
    AS
     select T1.*,round(avg(T1."21_DAYS_AVG_LOW") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_LOW",
  round(avg(T1."21_DAYS_AVG_MAX") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_MAX",
  round(avg(T1."21_DAYS_AVG_CLOSE") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_CLOSE"
  ,
ROUND(100*(avg(T1."21_DAYS_AVG_LOW") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ))/(T1."21_DAYS_AVG_LOW"*21),2) AS "ACCURACY_MIN_21_DAYS",
ROUND(100*"AVG21_21_DAYS_AVG_MAX"/(T1."21_DAYS_AVG_MAX"*21),2) AS "ACCURACY_MAX_21_DAYS",
ROUND(100*"AVG21_21_DAYS_AVG_CLOSE"/(T1."21_DAYS_AVG_CLOSE"*21),2) AS "ACCURACY_CLOSE_21_DAYS",
ROUND(100*(T1."Traded Qty" -T1."7_DAY_AVG_Trade")/T1."Traded Qty" ,2) as "PER_INCRE_TTL_TRADE_7_DAYS"
  FROM (
select NSD.SYMBOL,SD.COMPANY_NAME,SD.INDEX_NAME,SD.INDUSTRY,DD.SR_NUM,date(nsD.tIMESTAMP) AS Date_WF,
to_char(date(DD.CALENDAR_DATE), 'DD/DD/yyYY') as Trade_Date,DD.CAL_YEAR,DD.CAL_WEEK,DD.CAL_MONTH,DD.CAL_QTR,
NSD.OPEN,NSD.HIGH AS "Max Price",NSD.LOW AS "Min Price",NSD.CLOSE As "Close Price", NSD.HIGH-NSD.LOW AS "DIFF_HIGH_LOW",
NSD.LAST,NSD.PREVCLOSE,NSD.TOTTRDQTY,NSD.TOTTRDVAL,NSD.TOTALTRADES AS "Traded Qty",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_LOW",
  round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_MAX",
  round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_CLOSE",
round(avg(NSD.TOTALTRADES) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
  ) ,2) "7_DAY_AVG_Trade"
from  ("TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" NSD inner join "TEST_DB"."EDW_DEV"."W_DAY_D" DD 
                on replace(date(NSD.timestamp) ,'-','') = DD.SR_NUM) inner join 
"TEST_DB"."EDW_DEV"."STOCK_DIM" SD on NSD.SYMBOL = SD.SYMBOL
order by DD.SR_NUM) T1;

select * from NSE_STOCK_DAILY_DATA_AGG_V where SYMBOL = 'MINDTREE';

====================================================================================================
create or replace table tab1 (stock_name varchar(250));
 insert into NSE_DAILY_DATA_LOAD_AGG   select T1.*,round(avg(T1."21_DAYS_AVG_LOW") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_LOW",
  round(avg(T1."21_DAYS_AVG_MAX") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_MAX",
  round(avg(T1."21_DAYS_AVG_CLOSE") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_CLOSE"
  ,
ROUND(100*(avg(T1."21_DAYS_AVG_LOW") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ))/(T1."21_DAYS_AVG_LOW"*21),2) AS "ACCURACY_MIN_21_DAYS",
ROUND(100*"AVG21_21_DAYS_AVG_MAX"/(T1."21_DAYS_AVG_MAX"*21),2) AS "ACCURACY_MAX_21_DAYS",
ROUND(100*"AVG21_21_DAYS_AVG_CLOSE"/(T1."21_DAYS_AVG_CLOSE"*21),2) AS "ACCURACY_CLOSE_21_DAYS",
ROUND(100*(T1."Traded Qty" -T1."7_DAY_AVG_Trade")/T1."Traded Qty" ,2) as "PER_INCRE_TTL_TRADE_7_DAYS"
  FROM (
select NSD.SYMBOL,SD.COMPANY_NAME,SD.INDEX_NAME,SD.INDUSTRY,DD.SR_NUM,date(nsD.tIMESTAMP) AS Date_WF,
to_char(date(DD.CALENDAR_DATE), 'DD/DD/yyYY') as Trade_Date,DD.CAL_YEAR,DD.CAL_WEEK,DD.CAL_MONTH,DD.CAL_QTR,
NSD.OPEN,NSD.HIGH AS "Max Price",NSD.LOW AS "Min Price",NSD.CLOSE As "Close Price", NSD.HIGH-NSD.LOW AS "DIFF_HIGH_LOW",
NSD.LAST,NSD.PREVCLOSE,NSD.TOTTRDQTY,NSD.TOTTRDVAL,NSD.TOTALTRADES AS "Traded Qty",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_LOW",
  round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_MAX",
  round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_CLOSE",
round(avg(NSD.TOTALTRADES) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
  ) ,2) "7_DAY_AVG_Trade"
from  ("TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" NSD inner join "TEST_DB"."EDW_DEV"."W_DAY_D" DD 
                on replace(date(NSD.timestamp) ,'-','') = DD.SR_NUM) inner join 
"TEST_DB"."EDW_DEV"."STOCK_DIM" SD on NSD.SYMBOL = SD.SYMBOL
where NSD.SYMBOL = 'MINDTREE' order by DD.SR_NUM) T1;
select * from tab1;
truncate table tab1;
create or replace procedure LOAD_NSE_DAILY_DATA_WITH_MEASURES()
    returns string
    language javascript
    as 
    $$
    var ret_val = ""
    var my_arr_sql = "select (SYMBOL) from STOCK_DIM"
    var my_trun_scri= "TRUNCATE TABLE NSE_DAILY_DATA_LOAD_AGG"
    var stat1 = snowflake.createStatement({sqlText: my_arr_sql })
    var res1 = stat1.execute()
    var res2 = snowflake.execute({sqlText:my_trun_scri })
    while(res1.next())
    {
    ret_val = res1.getColumnValue(1)
     var my_instr_sql = `insert into NSE_DAILY_DATA_LOAD_AGG select T1.*,round(avg(T1."21_DAYS_AVG_LOW") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_LOW",
  round(avg(T1."21_DAYS_AVG_MAX") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_MAX",
  round(avg(T1."21_DAYS_AVG_CLOSE") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "AVG21_21_DAYS_AVG_CLOSE"
  ,
ROUND(100*(avg(T1."21_DAYS_AVG_LOW") OVER (ORDER BY T1.SR_NUM,T1.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ))/(T1."21_DAYS_AVG_LOW"*21),2) AS "ACCURACY_MIN_21_DAYS",
ROUND(100*"AVG21_21_DAYS_AVG_MAX"/(T1."21_DAYS_AVG_MAX"*21),2) AS "ACCURACY_MAX_21_DAYS",
ROUND(100*"AVG21_21_DAYS_AVG_CLOSE"/(T1."21_DAYS_AVG_CLOSE"*21),2) AS "ACCURACY_CLOSE_21_DAYS",
ROUND(100*(T1."Traded Qty" -T1."7_DAY_AVG_Trade")/T1."Traded Qty" ,2) as "PER_INCRE_TTL_TRADE_7_DAYS"
  FROM (
select NSD.SYMBOL,SD.COMPANY_NAME,SD.INDEX_NAME,SD.INDUSTRY,DD.SR_NUM,date(nsD.tIMESTAMP) AS Date_WF,
to_char(date(DD.CALENDAR_DATE), 'DD/DD/yyYY') as Trade_Date,DD.CAL_YEAR,DD.CAL_WEEK,DD.CAL_MONTH,DD.CAL_QTR,
NSD.OPEN,NSD.HIGH AS "Max Price",NSD.LOW AS "Min Price",NSD.CLOSE As "Close Price", NSD.HIGH-NSD.LOW AS "DIFF_HIGH_LOW",
NSD.LAST,NSD.PREVCLOSE,NSD.TOTTRDQTY,NSD.TOTTRDVAL,NSD.TOTALTRADES AS "Traded Qty",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_LOW",
round(avg(NSD.LOW) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_LOW",
  round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_MAX",
round(avg(NSD.HIGH) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_MAX",
  round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 20 PRECEDING AND CURRENT ROW
  ) ,2) "21_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 89 PRECEDING AND CURRENT ROW
  ) ,2) "90_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 179 PRECEDING AND CURRENT ROW
  ) ,2) "180_DAYS_AVG_CLOSE",
round(avg(NSD.CLOSE) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 364 PRECEDING AND CURRENT ROW
  ) ,2) "365_DAYS_AVG_CLOSE",
round(avg(NSD.TOTALTRADES) OVER (ORDER BY SR_NUM,NSD.SYMBOL ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
  ) ,2) "7_DAY_AVG_Trade"
from  ("TEST_DB"."EDW_DEV"."NSE_STOCK_DAILY_DATA_F" NSD inner join "TEST_DB"."EDW_DEV"."W_DAY_D" DD 
                on replace(date(NSD.timestamp) ,'-','') = DD.SR_NUM) inner join 
"TEST_DB"."EDW_DEV"."STOCK_DIM" SD on NSD.SYMBOL = SD.SYMBOL
where NSD.SYMBOL = `+"\'"+ret_val+"\'"+ `order by DD.SR_NUM) T1`;
     var res_st1 = snowflake.execute({sqlText: my_instr_sql})
     //res_st1.next()
    }
    return ret_val
    $$;
call LOAD_NSE_DAILY_DATA_WITH_MEASURES();